function milter_v2($opts, $senderip, $senderport, $senderhelo, $sender, $recipients, $fp)
{
	$host = $opts["host"];
	$port = $opts["port"];

	$socket = Socket(strpos($host, ":") != -1 ? "AF_INET6" : "AF_INET", "SOCK_STREAM");
	if (!$socket->settimeout(number($opts["timeout"] ?? 5))) return;
	if (!$socket->connect($host, number($port))) return;

	milter_send($socket, "O", pack_uint32(2).pack_uint32(0x1 | 0x10 | 0x20).pack_uint32(0x7f));
	if (!milter_read($socket, milter_expect_O)) return;

	milter_send($socket, "C",
			"\x00".
			(strpos($senderip, ":") != -1 ? "6" : "4").
			pack_uint16($senderport).
			$senderip."\x00");
	if (!milter_read($socket, milter_expect_c)) return;

	milter_send($socket, "H", $senderhelo."\x00");
	if (!milter_read($socket, milter_expect_c)) return;

	milter_send($socket, "M", $sender."\x00");
	if (!milter_read($socket, milter_expect_c)) return;

	foreach ($recipients as $r)
	{
		milter_send($socket, "R", $r."\x00");
		if (!milter_read($socket, milter_expect_c)) return;
	}

	while ($str = $fp->read(32768))
	{
		milter_send($socket, "B", $str."\x00");
		if (!milter_read($socket, milter_expect_c)) return;
	}

	milter_send($socket, "E");

	$responses = [];
	while (true)
	{
		$data = milter_read($socket, milter_parse);
		if (!$data) return;
		if ($data["r"] == "a")
			break;
		$responses[] = $data;
	}

	milter_send($socket, "Q");
	$socket->close();
	return $responses;
}

function milter_send($socket, $cmd, $data = "")
{
	return $socket->send(pack_uint32(1 + strlen($data)).$cmd.$data);
}

function milter_read($socket, $parse)
{
	$data = $socket->recv(4);
	if (!$data) return;
	$data = $socket->recv(unpack_uint32($data));
	if (!$data) return;
	$payload = $parse($data[0], $data[1:]);
	if (!is_array($payload)) return;
	return ["r" => $data[0], "payload" => $payload];
}

function milter_expect_O($r, $data)
{
	if ($r != "O")
		return;
	return milter_parse($r, $data);
}

function milter_expect_c($r, $data)
{
	if ($r != "c")
		return;
	return milter_parse($r, $data);
}

function milter_parse($r, $data)
{
	if ($r == "h")
	{
		[$h, $v] = explode("\x00", $data);
		return ["header" => $h, "value" => $v];
	}
	if ($r == "q")
	{
		[$r] = explode("\x00", $data);
		return ["reason" => $r];
	}
	if ($r == "a")
	{
		return [];
	}
	if ($r == "O")
	{
		return [
			"version" => unpack_uint32($data[0:4]),
			"actions" => unpack_uint32($data[4:8]),
			"protocol" => unpack_uint32($data[8:12]),
		];
	}
	return [];
}

function pack_uint16($number)
{
	return chr($number >> 8 & 0xff).chr($number & 0xff);
}

function pack_uint32($number)
{
	return chr($number >> 24 & 0xff).chr($number >> 16 & 0xff).chr($number >> 8 & 0xff).chr($number & 0xff);
}

function unpack_uint32($number)
{
	return (ord($number[0]) << 24 & 0xff) + (ord($number[1]) << 16 & 0xff) + (ord($number[2]) << 8 & 0xff) + (ord($number[3]) & 0xff);
}
