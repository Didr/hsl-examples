class Memcached
{
	constructor($address, $opts = [])
	{
		$this->socket = Socket(Socket::AF($address), "SOCK_STREAM");
		if (!$this->socket->settimeout($opts["timeout"] ?? 5)) return;
		if (!$this->socket->connect($address, $opts["port"] ?? 11211)) return;
	}
	function disconnect()
	{
		$this->socket->shutdown("SHUT_RDWR");
		$this->socket->close();
	}

	function set($key, $value, $flags = 0, $exptime = 0)
	{
		return $this->_store("set", $key, $flags, $exptime, $value);
	}
	function get($key)
	{
		return $this->_fetch("get", $key);
	}
	function add($key, $value, $flags = 0, $exptime = 0)
	{
		return $this->_store("add", $key, $flags, $exptime, $value);
	}
	function del($key)
	{
		return $this->_delete($key);
	}
	function replace($key, $value, $flags = 0, $exptime = 0)
	{
		return $this->_store("replace", $key, $flags, $exptime, $value);
	}
	function append($key, $value, $flags = 0, $exptime = 0)
	{
		return $this->_store("append", $key, $flags, $exptime, $value);
	}
	function prepend($key, $value, $flags = 0, $exptime = 0)
	{
		return $this->_store("prepend", $key, $flags, $exptime, $value);
	}

	function _fetch($command, $key)
	{
		if (!$this->socket->send("$command $key\r\n")) return;
		$data = "";
		while (true)
		{
			if (!$resp = $this->socket->recv(8192)) return;
			$data .= $resp;
			if ($data[-5:] == "END\r\n")
				break;
		}
		$values = [];
		$offset = 0;
		while ($offset < strlen($data))
		{
			$lineEnd = strpos($data, "\r\n", $offset) - $offset;
			$line = substr($data, $offset, $lineEnd);
			[$type, $key, $flags, $length] = explode(" ", $line);
			if ($type != "VALUE") break;
			$offset += $lineEnd + 2;
			$values[] = substr($data, $offset, $length);
			$offset += number($length) + 2;
		}
		return $values;
	}

	function _delete($key)
	{
		if (!$this->socket->send("delete $key\r\n")) return;
		if (!$resp = $this->socket->recv(8192)) return;
		$resp = trim($resp);
		return $resp == "DELETED";
	}

	function _store($command, $key, $flags, $exptime, $value)
	{
		$bytes = strlen($value);
		if (!$this->socket->send("$command $key $flags $exptime $bytes\r\n$value\r\n")) return;
		if (!$resp = $this->socket->recv(8192)) return;
		$resp = trim($resp);
		return $resp == "STORED";
	}
}
